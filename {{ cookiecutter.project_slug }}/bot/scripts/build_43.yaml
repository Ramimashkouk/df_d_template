script:
  Global:
    Global node:
      RESPONSE:
        chatsky.Message:
          text: Global node response
      TRANSITIONS: []
      PRE_TRANSITION: {}
  demo:
    node1:
      RESPONSE:
        chatsky.Message:
          text: hey from node1
      TRANSITIONS:
      - dst:
        - demo
        - node2
        priority: 1
        cnd:
          custom.conditions.HelloCnd: null
      PRE_TRANSITION: {}
    node2:
      RESPONSE:
        custom.responses.DefaultResponse: null
      TRANSITIONS:
      - dst:
        - demo
        - node1
        priority: 1
        cnd:
          chatsky.conditions.slots.SlotsExtracted: friend.last_name
      - dst:
        - demo2
        - hi_demo2
        priority: 1
        cnd:
          custom.conditions.HiCnd: null
      - dst:
        - demo
        - Default Node
        priority: 1
        cnd:
          custom.conditions.AllGood: null
      PRE_TRANSITION:
        friend.last_name:
          chatsky.processing.slots.Extract: friend.last_name
    Default Node:
      RESPONSE:
        chatsky.Message:
          text: Why not just taking a nap?
      TRANSITIONS:
      - dst:
        - demo
        - node1
        priority: 1
        cnd:
          custom.conditions.AllGood2: null
      PRE_TRANSITION: {}
  demo2:
    hi_demo2:
      RESPONSE:
        chatsky.Message:
          text: Hi from demo2
      TRANSITIONS: []
      PRE_TRANSITION: {}
start_label:
- demo
- node1
fallback_label:
- demo
- Default Node
slots:
  person:
    programmer:
      username:
        chatsky.slots.RegexpSlot:
          regexp: username is ([a-zA-Z]+)
          match_group_idx: 1
      email:
        chatsky.slots.RegexpSlot:
          regexp: email is ([a-z@.A-Z]+)
          match_group_idx: 1
    admin:
      chatsky.slots.RegexpSlot:
        regexp: access to ([a-zA-Z]+)
  friend:
    first_name:
      chatsky.slots.RegexpSlot:
        regexp: ^[A-Z][a-z]+?(?= )
    last_name:
      chatsky.slots.RegexpSlot:
        regexp: (?<= )[A-Z][a-z]+
